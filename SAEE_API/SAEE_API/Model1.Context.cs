//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SAEE_API
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class SAEEEntities : DbContext
    {
        public SAEEEntities()
            : base("name=SAEEEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ActionReport> ActionReport { get; set; }
        public virtual DbSet<AssignmentGrading> AssignmentGrading { get; set; }
        public virtual DbSet<ContentPerWeek> ContentPerWeek { get; set; }
        public virtual DbSet<CourseAvailable> CourseAvailable { get; set; }
        public virtual DbSet<CourseReport> CourseReport { get; set; }
        public virtual DbSet<Courses> Courses { get; set; }
        public virtual DbSet<CourseTasks> CourseTasks { get; set; }
        public virtual DbSet<EnrolledCourses> EnrolledCourses { get; set; }
        public virtual DbSet<ErrorReport> ErrorReport { get; set; }
        public virtual DbSet<Proceedings> Proceedings { get; set; }
        public virtual DbSet<Schedule> Schedule { get; set; }
        public virtual DbSet<Specialties> Specialties { get; set; }
        public virtual DbSet<TeacherData> TeacherData { get; set; }
        public virtual DbSet<Users> Users { get; set; }
        public virtual DbSet<UsersTypes> UsersTypes { get; set; }
        public virtual DbSet<Weeks> Weeks { get; set; }
    
        public virtual ObjectResult<SP_Login_Result> SP_Login(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Login_Result>("SP_Login", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<string> SP_RegisterUser(string name, string lastname, Nullable<System.DateTime> birthdate, string email, string phoneNumber, string password, Nullable<int> userType, Nullable<int> specialty, Nullable<int> experienceYears)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var lastnameParameter = lastname != null ?
                new ObjectParameter("Lastname", lastname) :
                new ObjectParameter("Lastname", typeof(string));
    
            var birthdateParameter = birthdate.HasValue ?
                new ObjectParameter("Birthdate", birthdate) :
                new ObjectParameter("Birthdate", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneNumberParameter = phoneNumber != null ?
                new ObjectParameter("PhoneNumber", phoneNumber) :
                new ObjectParameter("PhoneNumber", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("Password", password) :
                new ObjectParameter("Password", typeof(string));
    
            var userTypeParameter = userType.HasValue ?
                new ObjectParameter("UserType", userType) :
                new ObjectParameter("UserType", typeof(int));
    
            var specialtyParameter = specialty.HasValue ?
                new ObjectParameter("Specialty", specialty) :
                new ObjectParameter("Specialty", typeof(int));
    
            var experienceYearsParameter = experienceYears.HasValue ?
                new ObjectParameter("ExperienceYears", experienceYears) :
                new ObjectParameter("ExperienceYears", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_RegisterUser", nameParameter, lastnameParameter, birthdateParameter, emailParameter, phoneNumberParameter, passwordParameter, userTypeParameter, specialtyParameter, experienceYearsParameter);
        }
    }
}
